onsuccess: next_stage
name: crowdsecurity/cowrie-json-logs-login
description: "Parse cowrie honeypot json logs"
filter: 'evt.Parsed.program == "cowrie_json" && ((JsonExtract(evt.Parsed.message, "event_id") == "cowrie.login.failed" || JsonExtract(evt.Parsed.message, "event_id") == "cowrie.login.success")'
statics:
  - target: evt.Meta.source_ip
    expression: JsonExtract(evt.Parsed.message, "src_ip")
  - target: evt.StrTime
    expression: JsonExtract(evt.Parsed.message, "timestamp")
  - target: evt.Meta.session
    expression: JsonExtract(evt.Parsed.message, "session")
  - target: evt.Meta.target_user
    expression: JsonExtract(evt.Parsed.message, "username")
  - meta: log_type
    value: cowrie_login
    
---
onsuccess: next_stage
name: crowdsecurity/cowrie-json-logs-connect
description: "Parse cowrie honeypot json logs"
filter: 'evt.Parsed.program == "cowrie_json" && ((JsonExtract(evt.Parsed.message, "event_id") == "cowrie.login.failed" || JsonExtract(evt.Parsed.message, "event_id") == "cowrie.login.success")'
statics:
  - target: evt.Meta.source_ip
    expression: JsonExtract(evt.Parsed.message, "src_ip")
  - target: evt.StrTime
    expression: JsonExtract(evt.Parsed.message, "timestamp")
  - target: evt.Meta.session
    expression: JsonExtract(evt.Parsed.message, "session")
  - meta: log_type
    value: cowrie_connect
  - target: evt.Meta.service
    expression: JsonExtract(evt.Parsed.message, "protocol") #either ssh or telnet


---
onsuccess: next_stage
name: crowdsecurity/cowrie-second-stage
filter: 'evt.type == 1'
statics:
  - meta: source_ip
    expression: evt.Overflow.Alert.Source.IP
